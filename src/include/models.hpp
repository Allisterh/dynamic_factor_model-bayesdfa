
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_dfa_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_dfa : public prob_grad {
private:
    int N;
    int P;
    int K;
    int nZ;
    vector<int> row_indx;
    vector<int> col_indx;
    int nVariances;
    vector<int> varIndx;
    int nZero;
    vector<int> row_indx_z;
    vector<int> col_indx_z;
    int n_pos;
    vector<double> y;
    vector<int> row_indx_pos;
    vector<int> col_indx_pos;
    double nu_fixed;
    int num_covar;
    int num_unique_covar;
    matrix_d d_covar;
    vector<vector<int> > covar_indexing;
    int estimate_nu;
public:
    model_dfa(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_dfa(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_dfa_namespace::model_dfa";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nZ", "int", context__.to_vec());
        nZ = int(0);
        vals_i__ = context__.vals_i("nZ");
        pos__ = 0;
        nZ = vals_i__[pos__++];
        context__.validate_dims("data initialization", "row_indx", "int", context__.to_vec(nZ));
        validate_non_negative_index("row_indx", "nZ", nZ);
        row_indx = std::vector<int>(nZ,int(0));
        vals_i__ = context__.vals_i("row_indx");
        pos__ = 0;
        size_t row_indx_limit_0__ = nZ;
        for (size_t i_0__ = 0; i_0__ < row_indx_limit_0__; ++i_0__) {
            row_indx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx", "int", context__.to_vec(nZ));
        validate_non_negative_index("col_indx", "nZ", nZ);
        col_indx = std::vector<int>(nZ,int(0));
        vals_i__ = context__.vals_i("col_indx");
        pos__ = 0;
        size_t col_indx_limit_0__ = nZ;
        for (size_t i_0__ = 0; i_0__ < col_indx_limit_0__; ++i_0__) {
            col_indx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nVariances", "int", context__.to_vec());
        nVariances = int(0);
        vals_i__ = context__.vals_i("nVariances");
        pos__ = 0;
        nVariances = vals_i__[pos__++];
        context__.validate_dims("data initialization", "varIndx", "int", context__.to_vec(P));
        validate_non_negative_index("varIndx", "P", P);
        varIndx = std::vector<int>(P,int(0));
        vals_i__ = context__.vals_i("varIndx");
        pos__ = 0;
        size_t varIndx_limit_0__ = P;
        for (size_t i_0__ = 0; i_0__ < varIndx_limit_0__; ++i_0__) {
            varIndx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nZero", "int", context__.to_vec());
        nZero = int(0);
        vals_i__ = context__.vals_i("nZero");
        pos__ = 0;
        nZero = vals_i__[pos__++];
        context__.validate_dims("data initialization", "row_indx_z", "int", context__.to_vec(nZero));
        validate_non_negative_index("row_indx_z", "nZero", nZero);
        row_indx_z = std::vector<int>(nZero,int(0));
        vals_i__ = context__.vals_i("row_indx_z");
        pos__ = 0;
        size_t row_indx_z_limit_0__ = nZero;
        for (size_t i_0__ = 0; i_0__ < row_indx_z_limit_0__; ++i_0__) {
            row_indx_z[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx_z", "int", context__.to_vec(nZero));
        validate_non_negative_index("col_indx_z", "nZero", nZero);
        col_indx_z = std::vector<int>(nZero,int(0));
        vals_i__ = context__.vals_i("col_indx_z");
        pos__ = 0;
        size_t col_indx_z_limit_0__ = nZero;
        for (size_t i_0__ = 0; i_0__ < col_indx_z_limit_0__; ++i_0__) {
            col_indx_z[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
        n_pos = int(0);
        vals_i__ = context__.vals_i("n_pos");
        pos__ = 0;
        n_pos = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_pos));
        validate_non_negative_index("y", "n_pos", n_pos);
        y = std::vector<double>(n_pos,double(0));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "row_indx_pos", "int", context__.to_vec(n_pos));
        validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
        row_indx_pos = std::vector<int>(n_pos,int(0));
        vals_i__ = context__.vals_i("row_indx_pos");
        pos__ = 0;
        size_t row_indx_pos_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < row_indx_pos_limit_0__; ++i_0__) {
            row_indx_pos[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx_pos", "int", context__.to_vec(n_pos));
        validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
        col_indx_pos = std::vector<int>(n_pos,int(0));
        vals_i__ = context__.vals_i("col_indx_pos");
        pos__ = 0;
        size_t col_indx_pos_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < col_indx_pos_limit_0__; ++i_0__) {
            col_indx_pos[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nu_fixed", "double", context__.to_vec());
        nu_fixed = double(0);
        vals_r__ = context__.vals_r("nu_fixed");
        pos__ = 0;
        nu_fixed = vals_r__[pos__++];
        context__.validate_dims("data initialization", "num_covar", "int", context__.to_vec());
        num_covar = int(0);
        vals_i__ = context__.vals_i("num_covar");
        pos__ = 0;
        num_covar = vals_i__[pos__++];
        context__.validate_dims("data initialization", "num_unique_covar", "int", context__.to_vec());
        num_unique_covar = int(0);
        vals_i__ = context__.vals_i("num_unique_covar");
        pos__ = 0;
        num_unique_covar = vals_i__[pos__++];
        context__.validate_dims("data initialization", "d_covar", "matrix_d", context__.to_vec(num_covar,N));
        validate_non_negative_index("d_covar", "num_covar", num_covar);
        validate_non_negative_index("d_covar", "N", N);
        d_covar = matrix_d(static_cast<Eigen::VectorXd::Index>(num_covar),static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("d_covar");
        pos__ = 0;
        size_t d_covar_m_mat_lim__ = num_covar;
        size_t d_covar_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < d_covar_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < d_covar_m_mat_lim__; ++m_mat__) {
                d_covar(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "covar_indexing", "int", context__.to_vec(P,num_covar));
        validate_non_negative_index("covar_indexing", "P", P);
        validate_non_negative_index("covar_indexing", "num_covar", num_covar);
        covar_indexing = std::vector<std::vector<int> >(P,std::vector<int>(num_covar,int(0)));
        vals_i__ = context__.vals_i("covar_indexing");
        pos__ = 0;
        size_t covar_indexing_limit_1__ = num_covar;
        for (size_t i_1__ = 0; i_1__ < covar_indexing_limit_1__; ++i_1__) {
            size_t covar_indexing_limit_0__ = P;
            for (size_t i_0__ = 0; i_0__ < covar_indexing_limit_0__; ++i_0__) {
                covar_indexing[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "estimate_nu", "int", context__.to_vec());
        estimate_nu = int(0);
        vals_i__ = context__.vals_i("estimate_nu");
        pos__ = 0;
        estimate_nu = vals_i__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"P",P,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"nZ",nZ,0);
        for (int k0__ = 0; k0__ < nZ; ++k0__) {
            check_greater_or_equal(function__,"row_indx[k0__]",row_indx[k0__],0);
        }
        for (int k0__ = 0; k0__ < nZ; ++k0__) {
            check_greater_or_equal(function__,"col_indx[k0__]",col_indx[k0__],0);
        }
        check_greater_or_equal(function__,"nVariances",nVariances,0);
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"varIndx[k0__]",varIndx[k0__],0);
        }
        check_greater_or_equal(function__,"nZero",nZero,0);
        for (int k0__ = 0; k0__ < nZero; ++k0__) {
            check_greater_or_equal(function__,"row_indx_z[k0__]",row_indx_z[k0__],0);
        }
        for (int k0__ = 0; k0__ < nZero; ++k0__) {
            check_greater_or_equal(function__,"col_indx_z[k0__]",col_indx_z[k0__],0);
        }
        check_greater_or_equal(function__,"n_pos",n_pos,0);
        for (int k0__ = 0; k0__ < n_pos; ++k0__) {
            check_greater_or_equal(function__,"row_indx_pos[k0__]",row_indx_pos[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_pos; ++k0__) {
            check_greater_or_equal(function__,"col_indx_pos[k0__]",col_indx_pos[k0__],0);
        }
        check_greater_or_equal(function__,"nu_fixed",nu_fixed,1);
        check_greater_or_equal(function__,"num_covar",num_covar,0);
        check_greater_or_equal(function__,"num_unique_covar",num_unique_covar,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K * N;
        num_params_r__ += nZ;
        num_params_r__ += nVariances;
        num_params_r__ += estimate_nu;
    }

    ~model_dfa() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x")))
            throw std::runtime_error("variable x missing");
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        context__.validate_dims("initialization", "x", "matrix_d", context__.to_vec(K,N));
        // generate_declaration x
        matrix_d x(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(N));
        for (int j2__ = 0U; j2__ < N; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                x(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        context__.validate_dims("initialization", "z", "vector_d", context__.to_vec(nZ));
        // generate_declaration z
        vector_d z(static_cast<Eigen::VectorXd::Index>(nZ));
        for (int j1__ = 0U; j1__ < nZ; ++j1__)
            z(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(nVariances));
        // generate_declaration sigma
        std::vector<double> sigma(nVariances,double(0));
        for (int i0__ = 0U; i0__ < nVariances; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < nVariances; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("nu")))
            throw std::runtime_error("variable nu missing");
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu", "double", context__.to_vec(estimate_nu));
        // generate_declaration nu
        std::vector<double> nu(estimate_nu,double(0));
        for (int i0__ = 0U; i0__ < estimate_nu; ++i0__)
            nu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < estimate_nu; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(2,nu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  x;
        (void) x;  // dummy to suppress unused var warning
        if (jacobian__)
            x = in__.matrix_constrain(K,N,lp__);
        else
            x = in__.matrix_constrain(K,N);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z;
        (void) z;  // dummy to suppress unused var warning
        if (jacobian__)
            z = in__.vector_constrain(nZ,lp__);
        else
            z = in__.vector_constrain(nZ);

        vector<T__> sigma;
        size_t dim_sigma_0__ = nVariances;
        sigma.reserve(dim_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            if (jacobian__)
                sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> nu;
        size_t dim_nu_0__ = estimate_nu;
        nu.reserve(dim_nu_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_0__; ++k_0__) {
            if (jacobian__)
                nu.push_back(in__.scalar_lb_constrain(2,lp__));
            else
                nu.push_back(in__.scalar_lb_constrain(2));
        }


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  pred(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(N));
        (void) pred;  // dummy to suppress unused var warning
        stan::math::initialize(pred, DUMMY_VAR__);
        stan::math::fill(pred,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Z(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(K));
        (void) Z;  // dummy to suppress unused var warning
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z,DUMMY_VAR__);


        try {
            for (int i = 1; i <= nZ; ++i) {

                stan::math::assign(get_base1_lhs(Z,get_base1(row_indx,i,"row_indx",1),get_base1(col_indx,i,"col_indx",1),"Z",1), get_base1(z,i,"z",1));
            }
            if (as_bool(logical_gt(nZero,2))) {

                for (int i = 1; i <= (nZero - 2); ++i) {

                    stan::math::assign(get_base1_lhs(Z,get_base1(row_indx_z,i,"row_indx_z",1),get_base1(col_indx_z,i,"col_indx_z",1),"Z",1), 0);
                }
            }
            for (int k = 1; k <= K; ++k) {

                stan::math::assign(get_base1_lhs(Z,k,k,"Z",1), 1);
            }
            stan::math::assign(pred, multiply(Z,x));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < P; ++i0__) {
            for (int i1__ = 0; i1__ < N; ++i1__) {
                if (stan::math::is_uninitialized(pred(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pred" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < P; ++i0__) {
            for (int i1__ = 0; i1__ < K; ++i1__) {
                if (stan::math::is_uninitialized(Z(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Z" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int k = 1; k <= K; ++k) {

                lp_accum__.add(normal_log<propto__>(get_base1(x,k,1,"x",1), 0, 1));
                for (int t = 2; t <= N; ++t) {

                    if (as_bool(logical_eq(estimate_nu,1))) {

                        lp_accum__.add(student_t_log<propto__>(get_base1(x,k,t,"x",1), get_base1(nu,1,"nu",1), get_base1(x,k,(t - 1),"x",1), 1));
                    } else {

                        lp_accum__.add(student_t_log<propto__>(get_base1(x,k,t,"x",1), nu_fixed, get_base1(x,k,(t - 1),"x",1), 1));
                    }
                }
            }
            if (as_bool(logical_eq(estimate_nu,1))) {

                lp_accum__.add(gamma_log<propto__>(get_base1(nu,1,"nu",1), 2, 0.10000000000000001));
            }
            lp_accum__.add(normal_log<propto__>(get_base1(z,1,"z",1), 0.5, 0.5));
            for (int i = 2; i <= nZ; ++i) {

                lp_accum__.add(normal_log<propto__>(get_base1(z,i,"z",1), 0, 1));
            }
            lp_accum__.add(student_t_log<propto__>(sigma, 3, 0, 2));
            for (int i = 1; i <= n_pos; ++i) {

                lp_accum__.add(normal_log<propto__>(get_base1(y,i,"y",1), get_base1(pred,get_base1(row_indx_pos,i,"row_indx_pos",1),get_base1(col_indx_pos,i,"col_indx_pos",1),"pred",1), get_base1(sigma,get_base1(varIndx,get_base1(row_indx_pos,i,"row_indx_pos",1),"varIndx",1),"sigma",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("sigma");
        names__.push_back("nu");
        names__.push_back("pred");
        names__.push_back("Z");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nVariances);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_nu);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pos);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_dfa_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d x = in__.matrix_constrain(K,N);
        vector_d z = in__.vector_constrain(nZ);
        vector<double> sigma;
        size_t dim_sigma_0__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> nu;
        size_t dim_nu_0__ = estimate_nu;
        for (size_t k_0__ = 0; k_0__ < dim_nu_0__; ++k_0__) {
            nu.push_back(in__.scalar_lb_constrain(2));
        }
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(x(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < nZ; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < nVariances; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < estimate_nu; ++k_0__) {
            vars__.push_back(nu[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        matrix_d pred(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(N));
        (void) pred;  // dummy to suppress unused var warning
        stan::math::initialize(pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(pred,DUMMY_VAR__);
        matrix_d Z(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(K));
        (void) Z;  // dummy to suppress unused var warning
        stan::math::initialize(Z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Z,DUMMY_VAR__);


        try {
            for (int i = 1; i <= nZ; ++i) {

                stan::math::assign(get_base1_lhs(Z,get_base1(row_indx,i,"row_indx",1),get_base1(col_indx,i,"col_indx",1),"Z",1), get_base1(z,i,"z",1));
            }
            if (as_bool(logical_gt(nZero,2))) {

                for (int i = 1; i <= (nZero - 2); ++i) {

                    stan::math::assign(get_base1_lhs(Z,get_base1(row_indx_z,i,"row_indx_z",1),get_base1(col_indx_z,i,"col_indx_z",1),"Z",1), 0);
                }
            }
            for (int k = 1; k <= K; ++k) {

                stan::math::assign(get_base1_lhs(Z,k,k,"Z",1), 1);
            }
            stan::math::assign(pred, multiply(Z,x));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
                vars__.push_back(pred(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < K; ++k_1__) {
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
                vars__.push_back(Z(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n_pos));
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int n = 1; n <= n_pos; ++n) {

                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), normal_log(get_base1(y,n,"y",1),get_base1(pred,get_base1(row_indx_pos,n,"row_indx_pos",1),get_base1(col_indx_pos,n,"col_indx_pos",1),"pred",1),get_base1(sigma,get_base1(varIndx,get_base1(row_indx_pos,n,"row_indx_pos",1),"varIndx",1),"sigma",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < n_pos; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dfa";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nZ; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nVariances; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= estimate_nu; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_pos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nZ; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nVariances; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= estimate_nu; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_pos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_tvdfa_fixed_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_tvdfa_fixed : public prob_grad {
private:
    int N;
    int P;
    int K;
    int nZ;
    vector<int> row_indx;
    vector<int> col_indx;
    int nVariances;
    vector<int> varIndx;
    int nZero;
    vector<int> row_indx_z;
    vector<int> col_indx_z;
    int n_pos;
    vector<double> y;
    vector<int> row_indx_pos;
    vector<int> col_indx_pos;
    int nu;
    double tau;
public:
    model_tvdfa_fixed(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_tvdfa_fixed(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_tvdfa_fixed_namespace::model_tvdfa_fixed";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nZ", "int", context__.to_vec());
        nZ = int(0);
        vals_i__ = context__.vals_i("nZ");
        pos__ = 0;
        nZ = vals_i__[pos__++];
        context__.validate_dims("data initialization", "row_indx", "int", context__.to_vec(nZ));
        validate_non_negative_index("row_indx", "nZ", nZ);
        row_indx = std::vector<int>(nZ,int(0));
        vals_i__ = context__.vals_i("row_indx");
        pos__ = 0;
        size_t row_indx_limit_0__ = nZ;
        for (size_t i_0__ = 0; i_0__ < row_indx_limit_0__; ++i_0__) {
            row_indx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx", "int", context__.to_vec(nZ));
        validate_non_negative_index("col_indx", "nZ", nZ);
        col_indx = std::vector<int>(nZ,int(0));
        vals_i__ = context__.vals_i("col_indx");
        pos__ = 0;
        size_t col_indx_limit_0__ = nZ;
        for (size_t i_0__ = 0; i_0__ < col_indx_limit_0__; ++i_0__) {
            col_indx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nVariances", "int", context__.to_vec());
        nVariances = int(0);
        vals_i__ = context__.vals_i("nVariances");
        pos__ = 0;
        nVariances = vals_i__[pos__++];
        context__.validate_dims("data initialization", "varIndx", "int", context__.to_vec(P));
        validate_non_negative_index("varIndx", "P", P);
        varIndx = std::vector<int>(P,int(0));
        vals_i__ = context__.vals_i("varIndx");
        pos__ = 0;
        size_t varIndx_limit_0__ = P;
        for (size_t i_0__ = 0; i_0__ < varIndx_limit_0__; ++i_0__) {
            varIndx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nZero", "int", context__.to_vec());
        nZero = int(0);
        vals_i__ = context__.vals_i("nZero");
        pos__ = 0;
        nZero = vals_i__[pos__++];
        context__.validate_dims("data initialization", "row_indx_z", "int", context__.to_vec(nZero));
        validate_non_negative_index("row_indx_z", "nZero", nZero);
        row_indx_z = std::vector<int>(nZero,int(0));
        vals_i__ = context__.vals_i("row_indx_z");
        pos__ = 0;
        size_t row_indx_z_limit_0__ = nZero;
        for (size_t i_0__ = 0; i_0__ < row_indx_z_limit_0__; ++i_0__) {
            row_indx_z[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx_z", "int", context__.to_vec(nZero));
        validate_non_negative_index("col_indx_z", "nZero", nZero);
        col_indx_z = std::vector<int>(nZero,int(0));
        vals_i__ = context__.vals_i("col_indx_z");
        pos__ = 0;
        size_t col_indx_z_limit_0__ = nZero;
        for (size_t i_0__ = 0; i_0__ < col_indx_z_limit_0__; ++i_0__) {
            col_indx_z[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
        n_pos = int(0);
        vals_i__ = context__.vals_i("n_pos");
        pos__ = 0;
        n_pos = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_pos));
        validate_non_negative_index("y", "n_pos", n_pos);
        y = std::vector<double>(n_pos,double(0));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "row_indx_pos", "int", context__.to_vec(n_pos));
        validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
        row_indx_pos = std::vector<int>(n_pos,int(0));
        vals_i__ = context__.vals_i("row_indx_pos");
        pos__ = 0;
        size_t row_indx_pos_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < row_indx_pos_limit_0__; ++i_0__) {
            row_indx_pos[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "col_indx_pos", "int", context__.to_vec(n_pos));
        validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
        col_indx_pos = std::vector<int>(n_pos,int(0));
        vals_i__ = context__.vals_i("col_indx_pos");
        pos__ = 0;
        size_t col_indx_pos_limit_0__ = n_pos;
        for (size_t i_0__ = 0; i_0__ < col_indx_pos_limit_0__; ++i_0__) {
            col_indx_pos[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "nu", "int", context__.to_vec());
        nu = int(0);
        vals_i__ = context__.vals_i("nu");
        pos__ = 0;
        nu = vals_i__[pos__++];
        context__.validate_dims("data initialization", "tau", "double", context__.to_vec());
        tau = double(0);
        vals_r__ = context__.vals_r("tau");
        pos__ = 0;
        tau = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"P",P,0);
        check_greater_or_equal(function__,"K",K,0);
        check_greater_or_equal(function__,"nZ",nZ,0);
        for (int k0__ = 0; k0__ < nZ; ++k0__) {
            check_greater_or_equal(function__,"row_indx[k0__]",row_indx[k0__],0);
        }
        for (int k0__ = 0; k0__ < nZ; ++k0__) {
            check_greater_or_equal(function__,"col_indx[k0__]",col_indx[k0__],0);
        }
        check_greater_or_equal(function__,"nVariances",nVariances,0);
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"varIndx[k0__]",varIndx[k0__],0);
        }
        check_greater_or_equal(function__,"nZero",nZero,0);
        for (int k0__ = 0; k0__ < nZero; ++k0__) {
            check_greater_or_equal(function__,"row_indx_z[k0__]",row_indx_z[k0__],0);
        }
        for (int k0__ = 0; k0__ < nZero; ++k0__) {
            check_greater_or_equal(function__,"col_indx_z[k0__]",col_indx_z[k0__],0);
        }
        check_greater_or_equal(function__,"n_pos",n_pos,0);
        for (int k0__ = 0; k0__ < n_pos; ++k0__) {
            check_greater_or_equal(function__,"row_indx_pos[k0__]",row_indx_pos[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_pos; ++k0__) {
            check_greater_or_equal(function__,"col_indx_pos[k0__]",col_indx_pos[k0__],0);
        }
        check_greater_or_equal(function__,"nu",nu,1);
        check_greater_or_equal(function__,"tau",tau,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K * N;
        num_params_r__ += nZ * N;
        num_params_r__ += nVariances;
    }

    ~model_tvdfa_fixed() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x")))
            throw std::runtime_error("variable x missing");
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        context__.validate_dims("initialization", "x", "matrix_d", context__.to_vec(K,N));
        // generate_declaration x
        matrix_d x(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(N));
        for (int j2__ = 0U; j2__ < N; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                x(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        context__.validate_dims("initialization", "z", "vector_d", context__.to_vec(N,nZ));
        // generate_declaration z
        std::vector<vector_d> z(N,vector_d(static_cast<Eigen::VectorXd::Index>(nZ)));
        for (int j1__ = 0U; j1__ < nZ; ++j1__)
            for (int i0__ = 0U; i0__ < N; ++i0__)
                z[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.vector_unconstrain(z[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(nVariances));
        // generate_declaration sigma
        std::vector<double> sigma(nVariances,double(0));
        for (int i0__ = 0U; i0__ < nVariances; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < nVariances; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  x;
        (void) x;  // dummy to suppress unused var warning
        if (jacobian__)
            x = in__.matrix_constrain(K,N,lp__);
        else
            x = in__.matrix_constrain(K,N);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > z;
        size_t dim_z_0__ = N;
        z.reserve(dim_z_0__);
        for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
            if (jacobian__)
                z.push_back(in__.vector_constrain(nZ,lp__));
            else
                z.push_back(in__.vector_constrain(nZ));
        }

        vector<T__> sigma;
        size_t dim_sigma_0__ = nVariances;
        sigma.reserve(dim_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            if (jacobian__)
                sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma.push_back(in__.scalar_lb_constrain(0));
        }


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  pred(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(N));
        (void) pred;  // dummy to suppress unused var warning
        stan::math::initialize(pred, DUMMY_VAR__);
        stan::math::fill(pred,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > Z(N, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(K))));
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z,DUMMY_VAR__);


        try {
            for (int n = 1; n <= N; ++n) {

                for (int i = 1; i <= nZ; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(Z,n,"Z",1),get_base1(row_indx,i,"row_indx",1),get_base1(col_indx,i,"col_indx",1),"Z",2), get_base1(get_base1(z,n,"z",1),i,"z",2));
                }
            }
            if (as_bool(logical_gt(nZero,2))) {

                for (int n = 1; n <= N; ++n) {

                    for (int i = 1; i <= (nZero - 2); ++i) {

                        stan::math::assign(get_base1_lhs(get_base1_lhs(Z,n,"Z",1),get_base1(row_indx_z,i,"row_indx_z",1),get_base1(col_indx_z,i,"col_indx_z",1),"Z",2), 0);
                    }
                }
            }
            for (int n = 1; n <= N; ++n) {

                for (int p = 1; p <= P; ++p) {

                    stan::math::assign(get_base1_lhs(pred,p,n,"pred",1), (get_base1(get_base1(Z,n,"Z",1),p,1,"Z",2) * get_base1(x,1,n,"x",1)));
                }
            }
            if (as_bool(logical_gt(K,1))) {

                for (int n = 1; n <= N; ++n) {

                    for (int p = 1; p <= P; ++p) {

                        for (int k = 2; k <= K; ++k) {

                            stan::math::assign(get_base1_lhs(pred,p,n,"pred",1), (get_base1(pred,p,n,"pred",1) + (get_base1(get_base1(Z,n,"Z",1),p,k,"Z",2) * get_base1(x,k,n,"x",1))));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < P; ++i0__) {
            for (int i1__ = 0; i1__ < N; ++i1__) {
                if (stan::math::is_uninitialized(pred(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pred" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                for (int i2__ = 0; i2__ < K; ++i2__) {
                    if (stan::math::is_uninitialized(Z[i0__](i1__,i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int k = 1; k <= K; ++k) {

                lp_accum__.add(normal_log<propto__>(get_base1(x,k,1,"x",1), 0, 1));
                for (int t = 2; t <= N; ++t) {

                    lp_accum__.add(student_t_log<propto__>(get_base1(x,k,t,"x",1), nu, get_base1(x,k,(t - 1),"x",1), 1));
                }
            }
            for (int k = 1; k <= K; ++k) {

                for (int p = 1; p <= P; ++p) {

                    lp_accum__.add(normal_log(get_base1(get_base1(Z,1,"Z",1),p,k,"Z",2),0,1));
                }
            }
            for (int n = 2; n <= N; ++n) {

                for (int k = 1; k <= K; ++k) {

                    for (int p = 1; p <= P; ++p) {

                        lp_accum__.add(normal_log(get_base1(get_base1(Z,n,"Z",1),p,k,"Z",2),get_base1(get_base1(Z,(n - 1),"Z",1),p,k,"Z",2),tau));
                    }
                }
            }
            for (int n = 1; n <= N; ++n) {

                lp_accum__.add(normal_log<propto__>(get_base1(z,n,"z",1), 0, 1));
            }
            lp_accum__.add(student_t_log<propto__>(sigma, 3, 0, 2));
            for (int i = 1; i <= n_pos; ++i) {

                lp_accum__.add(normal_log<propto__>(get_base1(y,i,"y",1), get_base1(pred,get_base1(row_indx_pos,i,"row_indx_pos",1),get_base1(col_indx_pos,i,"col_indx_pos",1),"pred",1), get_base1(sigma,get_base1(varIndx,get_base1(row_indx_pos,i,"row_indx_pos",1),"varIndx",1),"sigma",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("sigma");
        names__.push_back("pred");
        names__.push_back("Z");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nVariances);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pos);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_tvdfa_fixed_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d x = in__.matrix_constrain(K,N);
        vector<vector_d> z;
        size_t dim_z_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
            z.push_back(in__.vector_constrain(nZ));
        }
        vector<double> sigma;
        size_t dim_sigma_0__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(x(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < nZ; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(z[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < nVariances; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        matrix_d pred(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(N));
        (void) pred;  // dummy to suppress unused var warning
        stan::math::initialize(pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(pred,DUMMY_VAR__);
        vector<matrix_d> Z(N, (matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(K))));
        stan::math::initialize(Z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Z,DUMMY_VAR__);


        try {
            for (int n = 1; n <= N; ++n) {

                for (int i = 1; i <= nZ; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(Z,n,"Z",1),get_base1(row_indx,i,"row_indx",1),get_base1(col_indx,i,"col_indx",1),"Z",2), get_base1(get_base1(z,n,"z",1),i,"z",2));
                }
            }
            if (as_bool(logical_gt(nZero,2))) {

                for (int n = 1; n <= N; ++n) {

                    for (int i = 1; i <= (nZero - 2); ++i) {

                        stan::math::assign(get_base1_lhs(get_base1_lhs(Z,n,"Z",1),get_base1(row_indx_z,i,"row_indx_z",1),get_base1(col_indx_z,i,"col_indx_z",1),"Z",2), 0);
                    }
                }
            }
            for (int n = 1; n <= N; ++n) {

                for (int p = 1; p <= P; ++p) {

                    stan::math::assign(get_base1_lhs(pred,p,n,"pred",1), (get_base1(get_base1(Z,n,"Z",1),p,1,"Z",2) * get_base1(x,1,n,"x",1)));
                }
            }
            if (as_bool(logical_gt(K,1))) {

                for (int n = 1; n <= N; ++n) {

                    for (int p = 1; p <= P; ++p) {

                        for (int k = 2; k <= K; ++k) {

                            stan::math::assign(get_base1_lhs(pred,p,n,"pred",1), (get_base1(pred,p,n,"pred",1) + (get_base1(get_base1(Z,n,"Z",1),p,k,"Z",2) * get_base1(x,k,n,"x",1))));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
                vars__.push_back(pred(k_0__, k_1__));
            }
        }
        for (int k_2__ = 0; k_2__ < K; ++k_2__) {
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                    vars__.push_back(Z[k_0__](k_1__, k_2__));
                }
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n_pos));
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int n = 1; n <= n_pos; ++n) {
                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), normal_log(get_base1(y,n,"y",1),get_base1(pred,get_base1(row_indx_pos,n,"row_indx_pos",1),get_base1(col_indx_pos,n,"col_indx_pos",1),"pred",1),get_base1(sigma,get_base1(varIndx,get_base1(row_indx_pos,n,"row_indx_pos",1),"varIndx",1),"sigma",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < n_pos; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_tvdfa_fixed";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nZ; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nVariances; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= K; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_pos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nZ; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nVariances; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= K; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_pos; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




#endif
