/*
    bayesdfa is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayesdfa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayesdfa.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_regime_1_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_regime_1");
    reader.add_event(34, 32, "end", "model_regime_1");
    return reader;
}

#include <meta_header.hpp>
 class model_regime_1 : public prob_grad {
private:
    int T;
    int K;
    vector<double> x_t;
    int est_sigma;
    vector<double> sigma_t;
public:
    model_regime_1(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_regime_1(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_regime_1_namespace::model_regime_1";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("x_t", "T", T);
            context__.validate_dims("data initialization", "x_t", "double", context__.to_vec(T));
            validate_non_negative_index("x_t", "T", T);
            x_t = std::vector<double>(T,double(0));
            vals_r__ = context__.vals_r("x_t");
            pos__ = 0;
            size_t x_t_limit_0__ = T;
            for (size_t i_0__ = 0; i_0__ < x_t_limit_0__; ++i_0__) {
                x_t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "est_sigma", "int", context__.to_vec());
            est_sigma = int(0);
            vals_i__ = context__.vals_i("est_sigma");
            pos__ = 0;
            est_sigma = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("sigma_t", "T", T);
            context__.validate_dims("data initialization", "sigma_t", "double", context__.to_vec(T));
            validate_non_negative_index("sigma_t", "T", T);
            sigma_t = std::vector<double>(T,double(0));
            vals_r__ = context__.vals_r("sigma_t");
            pos__ = 0;
            size_t sigma_t_limit_0__ = T;
            for (size_t i_0__ = 0; i_0__ < sigma_t_limit_0__; ++i_0__) {
                sigma_t[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"T",T,1);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"est_sigma",est_sigma,0);
            current_statement_begin__ = 6;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 9;
            ++num_params_r__;
            current_statement_begin__ = 10;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_regime_1() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu_k")))
            throw std::runtime_error("variable mu_k missing");
        vals_r__ = context__.vals_r("mu_k");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_k", "double", context__.to_vec());
        double mu_k(0);
        mu_k = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_k: ") + e.what());
        }

        if (!(context__.contains_r("sigma_k")))
            throw std::runtime_error("variable sigma_k missing");
        vals_r__ = context__.vals_r("sigma_k");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_k", "double", context__.to_vec());
        double sigma_k(0);
        sigma_k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_k: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ mu_k;
            (void) mu_k;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_k = in__.scalar_constrain(lp__);
            else
                mu_k = in__.scalar_constrain();

            local_scalar_t__ sigma_k;
            (void) sigma_k;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_k = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_k = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 13;
            validate_non_negative_index("sigmas", "T", T);
            vector<local_scalar_t__> sigmas(T);
            stan::math::initialize(sigmas, DUMMY_VAR__);
            stan::math::fill(sigmas,DUMMY_VAR__);


            current_statement_begin__ = 14;
            if (as_bool(logical_eq(est_sigma,1))) {

                current_statement_begin__ = 15;
                for (int i = 1; i <= T; ++i) {
                    current_statement_begin__ = 15;
                    stan::model::assign(sigmas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sigma_k, 
                                "assigning variable sigmas");
                }
            } else {

                current_statement_begin__ = 17;
                for (int i = 1; i <= T; ++i) {
                    current_statement_begin__ = 17;
                    stan::model::assign(sigmas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(sigma_t,i,"sigma_t",1), 
                                "assigning variable sigmas");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < T; ++i0__) {
                if (stan::math::is_uninitialized(sigmas[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigmas" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 13;

            // model body

            current_statement_begin__ = 21;
            lp_accum__.add(student_t_log<propto__>(mu_k, 3, 0, 3));
            current_statement_begin__ = 22;
            lp_accum__.add(student_t_log<propto__>(sigma_k, 3, 0, 1));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(x_t, mu_k, sigmas));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_k");
        names__.push_back("sigma_k");
        names__.push_back("sigmas");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_regime_1_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu_k = in__.scalar_constrain();
        double sigma_k = in__.scalar_lb_constrain(0);
        vars__.push_back(mu_k);
        vars__.push_back(sigma_k);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 13;
            validate_non_negative_index("sigmas", "T", T);
            vector<local_scalar_t__> sigmas(T);
            stan::math::initialize(sigmas, DUMMY_VAR__);
            stan::math::fill(sigmas,DUMMY_VAR__);


            current_statement_begin__ = 14;
            if (as_bool(logical_eq(est_sigma,1))) {

                current_statement_begin__ = 15;
                for (int i = 1; i <= T; ++i) {
                    current_statement_begin__ = 15;
                    stan::model::assign(sigmas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sigma_k, 
                                "assigning variable sigmas");
                }
            } else {

                current_statement_begin__ = 17;
                for (int i = 1; i <= T; ++i) {
                    current_statement_begin__ = 17;
                    stan::model::assign(sigmas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(sigma_t,i,"sigma_t",1), 
                                "assigning variable sigmas");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 13;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sigmas[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 27;
            validate_non_negative_index("log_lik", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(T));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);


            current_statement_begin__ = 29;
            for (int n = 1; n <= T; ++n) {

                current_statement_begin__ = 30;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_log(get_base1(x_t,n,"x_t",1),mu_k,get_base1(sigmas,n,"sigmas",1)), 
                            "assigning variable log_lik");
            }

            // validate generated quantities
            current_statement_begin__ = 27;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_regime_1";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_k";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigmas" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_k";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigmas" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_regime_1_namespace::model_regime_1 stan_model;


#endif
