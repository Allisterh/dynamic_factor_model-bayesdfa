/*
    bayesdfa is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayesdfa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayesdfa.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_dfa_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dfa");
    reader.add_event(389, 387, "end", "model_dfa");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
subset(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
           const int& drop,
           const int& P, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        {
        current_statement_begin__ = 9;
        validate_non_negative_index("result", "(P - 1)", (P - 1));
        validate_non_negative_index("result", "(P - 1)", (P - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> result((P - 1), (P - 1));
        stan::math::initialize(result, DUMMY_VAR__);
        stan::math::fill(result, DUMMY_VAR__);

        current_statement_begin__ = 11;
        int rowindx(0);
        (void) rowindx;  // dummy to suppress unused var warning
        stan::math::fill(rowindx, std::numeric_limits<int>::min());

        current_statement_begin__ = 12;
        int colindx(0);
        (void) colindx;  // dummy to suppress unused var warning
        stan::math::fill(colindx, std::numeric_limits<int>::min());


        current_statement_begin__ = 13;
        stan::math::assign(rowindx, 0);
        current_statement_begin__ = 14;
        for (int i = 1; i <= P; ++i) {

            current_statement_begin__ = 15;
            if (as_bool(logical_neq(i, drop))) {

                current_statement_begin__ = 16;
                stan::math::assign(rowindx, (rowindx + 1));
                current_statement_begin__ = 17;
                stan::math::assign(colindx, 0);
                current_statement_begin__ = 18;
                for (int j = 1; j <= P; ++j) {

                    current_statement_begin__ = 19;
                    if (as_bool(logical_neq(j, drop))) {

                        current_statement_begin__ = 20;
                        stan::math::assign(colindx, (colindx + 1));
                        current_statement_begin__ = 21;
                        stan::model::assign(result, 
                                    stan::model::cons_list(stan::model::index_uni(rowindx), stan::model::cons_list(stan::model::index_uni(colindx), stan::model::nil_index_list())), 
                                    get_base1(x, i, j, "x", 1), 
                                    "assigning variable result");
                    }
                }
            }
        }
        current_statement_begin__ = 27;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct subset_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
           const int& drop,
           const int& P, std::ostream* pstream__) const {
        return subset(x, drop, P, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
subsetvec(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
              const int& drop,
              const int& P, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        {
        current_statement_begin__ = 34;
        validate_non_negative_index("result", "(P - 1)", (P - 1));
        validate_non_negative_index("result", "1", 1);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> result((P - 1), 1);
        stan::math::initialize(result, DUMMY_VAR__);
        stan::math::fill(result, DUMMY_VAR__);

        current_statement_begin__ = 36;
        int rowindx(0);
        (void) rowindx;  // dummy to suppress unused var warning
        stan::math::fill(rowindx, std::numeric_limits<int>::min());


        current_statement_begin__ = 37;
        stan::math::assign(rowindx, 0);
        current_statement_begin__ = 38;
        for (int i = 1; i <= P; ++i) {

            current_statement_begin__ = 39;
            if (as_bool(logical_neq(i, drop))) {

                current_statement_begin__ = 40;
                stan::math::assign(rowindx, (rowindx + 1));
                current_statement_begin__ = 41;
                stan::model::assign(result, 
                            stan::model::cons_list(stan::model::index_uni(rowindx), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(x, i, drop, "x", 1), 
                            "assigning variable result");
            }
        }
        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct subsetvec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
              const int& drop,
              const int& P, std::ostream* pstream__) const {
        return subsetvec(x, drop, P, pstream__);
    }
};

#include <meta_header.hpp>
 class model_dfa : public prob_grad {
private:
        int N;
        int P;
        int K;
        int nZ;
        std::vector<int> row_indx;
        std::vector<int> col_indx;
        int nVariances;
        std::vector<int> varIndx;
        int nZero;
        std::vector<int> row_indx_z;
        std::vector<int> col_indx_z;
        int n_pos;
        std::vector<int> row_indx_pos;
        std::vector<int> col_indx_pos;
        std::vector<double> y;
        int n_na;
        std::vector<int> row_indx_na;
        std::vector<int> col_indx_na;
        double nu_fixed;
        int estimate_nu;
        int use_normal;
        int est_cor;
        int est_phi;
        int est_theta;
        int num_obs_covar;
        int n_obs_covar;
        std::vector<std::vector<int> > obs_covar_index;
        std::vector<double> obs_covar_value;
        int num_pro_covar;
        int n_pro_covar;
        std::vector<std::vector<int> > pro_covar_index;
        std::vector<double> pro_covar_value;
        std::vector<double> z_bound;
        int long_format;
        int n_pcor;
        int n_loglik;
        vector_d zeros;
        std::vector<int> counter;
public:
    model_dfa(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dfa(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dfa_namespace::model_dfa";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);

            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);

            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);

            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "nZ", "int", context__.to_vec());
            nZ = int(0);
            vals_i__ = context__.vals_i("nZ");
            pos__ = 0;
            nZ = vals_i__[pos__++];
            check_greater_or_equal(function__, "nZ", nZ, 0);

            current_statement_begin__ = 54;
            validate_non_negative_index("row_indx", "nZ", nZ);
            context__.validate_dims("data initialization", "row_indx", "int", context__.to_vec(nZ));
            row_indx = std::vector<int>(nZ, int(0));
            vals_i__ = context__.vals_i("row_indx");
            pos__ = 0;
            size_t row_indx_k_0_max__ = nZ;
            for (size_t k_0__ = 0; k_0__ < row_indx_k_0_max__; ++k_0__) {
                row_indx[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_i_0_max__ = nZ;
            for (size_t i_0__ = 0; i_0__ < row_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx[i_0__]", row_indx[i_0__], 0);
            }

            current_statement_begin__ = 55;
            validate_non_negative_index("col_indx", "nZ", nZ);
            context__.validate_dims("data initialization", "col_indx", "int", context__.to_vec(nZ));
            col_indx = std::vector<int>(nZ, int(0));
            vals_i__ = context__.vals_i("col_indx");
            pos__ = 0;
            size_t col_indx_k_0_max__ = nZ;
            for (size_t k_0__ = 0; k_0__ < col_indx_k_0_max__; ++k_0__) {
                col_indx[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_i_0_max__ = nZ;
            for (size_t i_0__ = 0; i_0__ < col_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx[i_0__]", col_indx[i_0__], 0);
            }

            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "nVariances", "int", context__.to_vec());
            nVariances = int(0);
            vals_i__ = context__.vals_i("nVariances");
            pos__ = 0;
            nVariances = vals_i__[pos__++];
            check_greater_or_equal(function__, "nVariances", nVariances, 0);

            current_statement_begin__ = 57;
            validate_non_negative_index("varIndx", "P", P);
            context__.validate_dims("data initialization", "varIndx", "int", context__.to_vec(P));
            varIndx = std::vector<int>(P, int(0));
            vals_i__ = context__.vals_i("varIndx");
            pos__ = 0;
            size_t varIndx_k_0_max__ = P;
            for (size_t k_0__ = 0; k_0__ < varIndx_k_0_max__; ++k_0__) {
                varIndx[k_0__] = vals_i__[pos__++];
            }
            size_t varIndx_i_0_max__ = P;
            for (size_t i_0__ = 0; i_0__ < varIndx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "varIndx[i_0__]", varIndx[i_0__], 0);
            }

            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "nZero", "int", context__.to_vec());
            nZero = int(0);
            vals_i__ = context__.vals_i("nZero");
            pos__ = 0;
            nZero = vals_i__[pos__++];
            check_greater_or_equal(function__, "nZero", nZero, 0);

            current_statement_begin__ = 59;
            validate_non_negative_index("row_indx_z", "nZero", nZero);
            context__.validate_dims("data initialization", "row_indx_z", "int", context__.to_vec(nZero));
            row_indx_z = std::vector<int>(nZero, int(0));
            vals_i__ = context__.vals_i("row_indx_z");
            pos__ = 0;
            size_t row_indx_z_k_0_max__ = nZero;
            for (size_t k_0__ = 0; k_0__ < row_indx_z_k_0_max__; ++k_0__) {
                row_indx_z[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_z_i_0_max__ = nZero;
            for (size_t i_0__ = 0; i_0__ < row_indx_z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_z[i_0__]", row_indx_z[i_0__], 0);
            }

            current_statement_begin__ = 60;
            validate_non_negative_index("col_indx_z", "nZero", nZero);
            context__.validate_dims("data initialization", "col_indx_z", "int", context__.to_vec(nZero));
            col_indx_z = std::vector<int>(nZero, int(0));
            vals_i__ = context__.vals_i("col_indx_z");
            pos__ = 0;
            size_t col_indx_z_k_0_max__ = nZero;
            for (size_t k_0__ = 0; k_0__ < col_indx_z_k_0_max__; ++k_0__) {
                col_indx_z[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_z_i_0_max__ = nZero;
            for (size_t i_0__ = 0; i_0__ < col_indx_z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_z[i_0__]", col_indx_z[i_0__], 0);
            }

            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
            n_pos = int(0);
            vals_i__ = context__.vals_i("n_pos");
            pos__ = 0;
            n_pos = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pos", n_pos, 0);

            current_statement_begin__ = 62;
            validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "row_indx_pos", "int", context__.to_vec(n_pos));
            row_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("row_indx_pos");
            pos__ = 0;
            size_t row_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < row_indx_pos_k_0_max__; ++k_0__) {
                row_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < row_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_pos[i_0__]", row_indx_pos[i_0__], 0);
            }

            current_statement_begin__ = 63;
            validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "col_indx_pos", "int", context__.to_vec(n_pos));
            col_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("col_indx_pos");
            pos__ = 0;
            size_t col_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < col_indx_pos_k_0_max__; ++k_0__) {
                col_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < col_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_pos[i_0__]", col_indx_pos[i_0__], 0);
            }

            current_statement_begin__ = 64;
            validate_non_negative_index("y", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_pos));
            y = std::vector<double>(n_pos, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "n_na", "int", context__.to_vec());
            n_na = int(0);
            vals_i__ = context__.vals_i("n_na");
            pos__ = 0;
            n_na = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_na", n_na, 0);

            current_statement_begin__ = 66;
            validate_non_negative_index("row_indx_na", "n_na", n_na);
            context__.validate_dims("data initialization", "row_indx_na", "int", context__.to_vec(n_na));
            row_indx_na = std::vector<int>(n_na, int(0));
            vals_i__ = context__.vals_i("row_indx_na");
            pos__ = 0;
            size_t row_indx_na_k_0_max__ = n_na;
            for (size_t k_0__ = 0; k_0__ < row_indx_na_k_0_max__; ++k_0__) {
                row_indx_na[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_na_i_0_max__ = n_na;
            for (size_t i_0__ = 0; i_0__ < row_indx_na_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_na[i_0__]", row_indx_na[i_0__], 0);
            }

            current_statement_begin__ = 67;
            validate_non_negative_index("col_indx_na", "n_na", n_na);
            context__.validate_dims("data initialization", "col_indx_na", "int", context__.to_vec(n_na));
            col_indx_na = std::vector<int>(n_na, int(0));
            vals_i__ = context__.vals_i("col_indx_na");
            pos__ = 0;
            size_t col_indx_na_k_0_max__ = n_na;
            for (size_t k_0__ = 0; k_0__ < col_indx_na_k_0_max__; ++k_0__) {
                col_indx_na[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_na_i_0_max__ = n_na;
            for (size_t i_0__ = 0; i_0__ < col_indx_na_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_na[i_0__]", col_indx_na[i_0__], 0);
            }

            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "nu_fixed", "double", context__.to_vec());
            nu_fixed = double(0);
            vals_r__ = context__.vals_r("nu_fixed");
            pos__ = 0;
            nu_fixed = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_fixed", nu_fixed, 1);

            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "estimate_nu", "int", context__.to_vec());
            estimate_nu = int(0);
            vals_i__ = context__.vals_i("estimate_nu");
            pos__ = 0;
            estimate_nu = vals_i__[pos__++];

            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "use_normal", "int", context__.to_vec());
            use_normal = int(0);
            vals_i__ = context__.vals_i("use_normal");
            pos__ = 0;
            use_normal = vals_i__[pos__++];

            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "est_cor", "int", context__.to_vec());
            est_cor = int(0);
            vals_i__ = context__.vals_i("est_cor");
            pos__ = 0;
            est_cor = vals_i__[pos__++];

            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "est_phi", "int", context__.to_vec());
            est_phi = int(0);
            vals_i__ = context__.vals_i("est_phi");
            pos__ = 0;
            est_phi = vals_i__[pos__++];

            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "est_theta", "int", context__.to_vec());
            est_theta = int(0);
            vals_i__ = context__.vals_i("est_theta");
            pos__ = 0;
            est_theta = vals_i__[pos__++];

            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "num_obs_covar", "int", context__.to_vec());
            num_obs_covar = int(0);
            vals_i__ = context__.vals_i("num_obs_covar");
            pos__ = 0;
            num_obs_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_obs_covar", num_obs_covar, 0);

            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "n_obs_covar", "int", context__.to_vec());
            n_obs_covar = int(0);
            vals_i__ = context__.vals_i("n_obs_covar");
            pos__ = 0;
            n_obs_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obs_covar", n_obs_covar, 0);

            current_statement_begin__ = 76;
            validate_non_negative_index("obs_covar_index", "num_obs_covar", num_obs_covar);
            validate_non_negative_index("obs_covar_index", "3", 3);
            context__.validate_dims("data initialization", "obs_covar_index", "int", context__.to_vec(num_obs_covar,3));
            obs_covar_index = std::vector<std::vector<int> >(num_obs_covar, std::vector<int>(3, int(0)));
            vals_i__ = context__.vals_i("obs_covar_index");
            pos__ = 0;
            size_t obs_covar_index_k_0_max__ = num_obs_covar;
            size_t obs_covar_index_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < obs_covar_index_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < obs_covar_index_k_0_max__; ++k_0__) {
                    obs_covar_index[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 77;
            validate_non_negative_index("obs_covar_value", "num_obs_covar", num_obs_covar);
            context__.validate_dims("data initialization", "obs_covar_value", "double", context__.to_vec(num_obs_covar));
            obs_covar_value = std::vector<double>(num_obs_covar, double(0));
            vals_r__ = context__.vals_r("obs_covar_value");
            pos__ = 0;
            size_t obs_covar_value_k_0_max__ = num_obs_covar;
            for (size_t k_0__ = 0; k_0__ < obs_covar_value_k_0_max__; ++k_0__) {
                obs_covar_value[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "num_pro_covar", "int", context__.to_vec());
            num_pro_covar = int(0);
            vals_i__ = context__.vals_i("num_pro_covar");
            pos__ = 0;
            num_pro_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_pro_covar", num_pro_covar, 0);

            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "n_pro_covar", "int", context__.to_vec());
            n_pro_covar = int(0);
            vals_i__ = context__.vals_i("n_pro_covar");
            pos__ = 0;
            n_pro_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pro_covar", n_pro_covar, 0);

            current_statement_begin__ = 80;
            validate_non_negative_index("pro_covar_index", "num_pro_covar", num_pro_covar);
            validate_non_negative_index("pro_covar_index", "3", 3);
            context__.validate_dims("data initialization", "pro_covar_index", "int", context__.to_vec(num_pro_covar,3));
            pro_covar_index = std::vector<std::vector<int> >(num_pro_covar, std::vector<int>(3, int(0)));
            vals_i__ = context__.vals_i("pro_covar_index");
            pos__ = 0;
            size_t pro_covar_index_k_0_max__ = num_pro_covar;
            size_t pro_covar_index_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < pro_covar_index_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pro_covar_index_k_0_max__; ++k_0__) {
                    pro_covar_index[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 81;
            validate_non_negative_index("pro_covar_value", "num_pro_covar", num_pro_covar);
            context__.validate_dims("data initialization", "pro_covar_value", "double", context__.to_vec(num_pro_covar));
            pro_covar_value = std::vector<double>(num_pro_covar, double(0));
            vals_r__ = context__.vals_r("pro_covar_value");
            pos__ = 0;
            size_t pro_covar_value_k_0_max__ = num_pro_covar;
            for (size_t k_0__ = 0; k_0__ < pro_covar_value_k_0_max__; ++k_0__) {
                pro_covar_value[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 82;
            validate_non_negative_index("z_bound", "2", 2);
            context__.validate_dims("data initialization", "z_bound", "double", context__.to_vec(2));
            z_bound = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("z_bound");
            pos__ = 0;
            size_t z_bound_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < z_bound_k_0_max__; ++k_0__) {
                z_bound[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "long_format", "int", context__.to_vec());
            long_format = int(0);
            vals_i__ = context__.vals_i("long_format");
            pos__ = 0;
            long_format = vals_i__[pos__++];
            check_greater_or_equal(function__, "long_format", long_format, 0);


            // initialize transformed data variables
            current_statement_begin__ = 86;
            n_pcor = int(0);
            stan::math::fill(n_pcor, std::numeric_limits<int>::min());

            current_statement_begin__ = 87;
            n_loglik = int(0);
            stan::math::fill(n_loglik, std::numeric_limits<int>::min());

            current_statement_begin__ = 88;
            validate_non_negative_index("zeros", "K", K);
            zeros = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(zeros, DUMMY_VAR__);

            current_statement_begin__ = 89;
            validate_non_negative_index("counter", "P", P);
            counter = std::vector<int>(P, int(0));
            stan::math::fill(counter, std::numeric_limits<int>::min());

            // execute transformed data statements
            current_statement_begin__ = 90;
            for (int p = 1; p <= P; ++p) {

                current_statement_begin__ = 91;
                stan::model::assign(counter, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            p, 
                            "assigning variable counter");
            }
            current_statement_begin__ = 94;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 95;
                stan::model::assign(zeros, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable zeros");
            }
            current_statement_begin__ = 98;
            stan::math::assign(n_loglik, n_pos);
            current_statement_begin__ = 99;
            if (as_bool(logical_eq(long_format, 0))) {

                current_statement_begin__ = 100;
                if (as_bool(logical_eq(est_cor, 0))) {

                    current_statement_begin__ = 101;
                    stan::math::assign(n_loglik, (P * N));
                } else {

                    current_statement_begin__ = 103;
                    stan::math::assign(n_loglik, N);
                }
            }
            current_statement_begin__ = 107;
            if (as_bool(logical_eq(est_cor, 0))) {

                current_statement_begin__ = 108;
                stan::math::assign(n_pcor, P);
                current_statement_begin__ = 109;
                if (as_bool(logical_lt(nVariances, 2))) {

                    current_statement_begin__ = 110;
                    stan::math::assign(n_pcor, 2);
                }
            } else {

                current_statement_begin__ = 113;
                stan::math::assign(n_pcor, P);
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 117;
            validate_non_negative_index("devs", "K", K);
            validate_non_negative_index("devs", "(N - 1)", (N - 1));
            num_params_r__ += (K * (N - 1));
            current_statement_begin__ = 118;
            validate_non_negative_index("x0", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 119;
            validate_non_negative_index("psi", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 120;
            validate_non_negative_index("z", "nZ", nZ);
            num_params_r__ += nZ;
            current_statement_begin__ = 121;
            validate_non_negative_index("zpos", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 122;
            validate_non_negative_index("b_obs", "n_obs_covar", n_obs_covar);
            validate_non_negative_index("b_obs", "P", P);
            num_params_r__ += (n_obs_covar * P);
            current_statement_begin__ = 123;
            validate_non_negative_index("b_pro", "n_pro_covar", n_pro_covar);
            validate_non_negative_index("b_pro", "K", K);
            num_params_r__ += (n_pro_covar * K);
            current_statement_begin__ = 124;
            validate_non_negative_index("sigma", "nVariances", nVariances);
            num_params_r__ += (1 * nVariances);
            current_statement_begin__ = 125;
            validate_non_negative_index("nu", "estimate_nu", estimate_nu);
            num_params_r__ += (1 * estimate_nu);
            current_statement_begin__ = 126;
            validate_non_negative_index("ymiss", "n_na", n_na);
            num_params_r__ += (1 * n_na);
            current_statement_begin__ = 127;
            validate_non_negative_index("phi", "(est_phi * K)", (est_phi * K));
            num_params_r__ += (1 * (est_phi * K));
            current_statement_begin__ = 128;
            validate_non_negative_index("theta", "(est_theta * K)", (est_theta * K));
            num_params_r__ += (1 * (est_theta * K));
            current_statement_begin__ = 129;
            validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
            validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
            num_params_r__ += ((n_pcor * (n_pcor - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dfa() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 117;
        if (!(context__.contains_r("devs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable devs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("devs");
        pos__ = 0U;
        validate_non_negative_index("devs", "K", K);
        validate_non_negative_index("devs", "(N - 1)", (N - 1));
        context__.validate_dims("parameter initialization", "devs", "matrix_d", context__.to_vec(K,(N - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> devs(K, (N - 1));
        size_t devs_j_2_max__ = (N - 1);
        size_t devs_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < devs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < devs_j_1_max__; ++j_1__) {
                devs(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(devs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable devs: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 118;
        if (!(context__.contains_r("x0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x0");
        pos__ = 0U;
        validate_non_negative_index("x0", "K", K);
        context__.validate_dims("parameter initialization", "x0", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> x0(K);
        size_t x0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            x0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(x0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 119;
        if (!(context__.contains_r("psi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi");
        pos__ = 0U;
        validate_non_negative_index("psi", "K", K);
        context__.validate_dims("parameter initialization", "psi", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi(K);
        size_t psi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            psi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, psi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 120;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "nZ", nZ);
        context__.validate_dims("parameter initialization", "z", "vector_d", context__.to_vec(nZ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z(nZ);
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            z(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(get_base1(z_bound, 1, "z_bound", 1), get_base1(z_bound, 2, "z_bound", 1), z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 121;
        if (!(context__.contains_r("zpos")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zpos missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zpos");
        pos__ = 0U;
        validate_non_negative_index("zpos", "K", K);
        context__.validate_dims("parameter initialization", "zpos", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zpos(K);
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            zpos(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zpos);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zpos: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 122;
        if (!(context__.contains_r("b_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_obs");
        pos__ = 0U;
        validate_non_negative_index("b_obs", "n_obs_covar", n_obs_covar);
        validate_non_negative_index("b_obs", "P", P);
        context__.validate_dims("parameter initialization", "b_obs", "matrix_d", context__.to_vec(n_obs_covar,P));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_obs(n_obs_covar, P);
        size_t b_obs_j_2_max__ = P;
        size_t b_obs_j_1_max__ = n_obs_covar;
        for (size_t j_2__ = 0; j_2__ < b_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_obs_j_1_max__; ++j_1__) {
                b_obs(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(b_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 123;
        if (!(context__.contains_r("b_pro")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_pro missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_pro");
        pos__ = 0U;
        validate_non_negative_index("b_pro", "n_pro_covar", n_pro_covar);
        validate_non_negative_index("b_pro", "K", K);
        context__.validate_dims("parameter initialization", "b_pro", "matrix_d", context__.to_vec(n_pro_covar,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_pro(n_pro_covar, K);
        size_t b_pro_j_2_max__ = K;
        size_t b_pro_j_1_max__ = n_pro_covar;
        for (size_t j_2__ = 0; j_2__ < b_pro_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_pro_j_1_max__; ++j_1__) {
                b_pro(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(b_pro);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_pro: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 124;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "nVariances", nVariances);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(nVariances));
        std::vector<double> sigma(nVariances, double(0));
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = nVariances;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 125;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "estimate_nu", estimate_nu);
        context__.validate_dims("parameter initialization", "nu", "double", context__.to_vec(estimate_nu));
        std::vector<double> nu(estimate_nu, double(0));
        size_t nu_k_0_max__ = estimate_nu;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            nu[k_0__] = vals_r__[pos__++];
        }
        size_t nu_i_0_max__ = estimate_nu;
        for (size_t i_0__ = 0; i_0__ < nu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(2, nu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 126;
        if (!(context__.contains_r("ymiss")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ymiss missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ymiss");
        pos__ = 0U;
        validate_non_negative_index("ymiss", "n_na", n_na);
        context__.validate_dims("parameter initialization", "ymiss", "double", context__.to_vec(n_na));
        std::vector<double> ymiss(n_na, double(0));
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            ymiss[k_0__] = vals_r__[pos__++];
        }
        size_t ymiss_i_0_max__ = n_na;
        for (size_t i_0__ = 0; i_0__ < ymiss_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(ymiss[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ymiss: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 127;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "(est_phi * K)", (est_phi * K));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec((est_phi * K)));
        std::vector<double> phi((est_phi * K), double(0));
        size_t phi_k_0_max__ = (est_phi * K);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = (est_phi * K);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(-(1), 1, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 128;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "(est_theta * K)", (est_theta * K));
        context__.validate_dims("parameter initialization", "theta", "double", context__.to_vec((est_theta * K)));
        std::vector<double> theta((est_theta * K), double(0));
        size_t theta_k_0_max__ = (est_theta * K);
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            theta[k_0__] = vals_r__[pos__++];
        }
        size_t theta_i_0_max__ = (est_theta * K);
        for (size_t i_0__ = 0; i_0__ < theta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(-(1), 1, theta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 129;
        if (!(context__.contains_r("Lcorr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Lcorr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Lcorr");
        pos__ = 0U;
        validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
        validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
        context__.validate_dims("parameter initialization", "Lcorr", "matrix_d", context__.to_vec(n_pcor,n_pcor));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lcorr(n_pcor, n_pcor);
        size_t Lcorr_j_2_max__ = n_pcor;
        size_t Lcorr_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                Lcorr(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(Lcorr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Lcorr: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 117;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> devs;
            (void) devs;  // dummy to suppress unused var warning
            if (jacobian__)
                devs = in__.matrix_constrain(K, (N - 1), lp__);
            else
                devs = in__.matrix_constrain(K, (N - 1));

            current_statement_begin__ = 118;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x0;
            (void) x0;  // dummy to suppress unused var warning
            if (jacobian__)
                x0 = in__.vector_constrain(K, lp__);
            else
                x0 = in__.vector_constrain(K);

            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi;
            (void) psi;  // dummy to suppress unused var warning
            if (jacobian__)
                psi = in__.vector_lb_constrain(0, K, lp__);
            else
                psi = in__.vector_lb_constrain(0, K);

            current_statement_begin__ = 120;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.vector_lub_constrain(get_base1(z_bound, 1, "z_bound", 1), get_base1(z_bound, 2, "z_bound", 1), nZ, lp__);
            else
                z = in__.vector_lub_constrain(get_base1(z_bound, 1, "z_bound", 1), get_base1(z_bound, 2, "z_bound", 1), nZ);

            current_statement_begin__ = 121;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zpos;
            (void) zpos;  // dummy to suppress unused var warning
            if (jacobian__)
                zpos = in__.vector_constrain(K, lp__);
            else
                zpos = in__.vector_constrain(K);

            current_statement_begin__ = 122;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b_obs;
            (void) b_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                b_obs = in__.matrix_constrain(n_obs_covar, P, lp__);
            else
                b_obs = in__.matrix_constrain(n_obs_covar, P);

            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b_pro;
            (void) b_pro;  // dummy to suppress unused var warning
            if (jacobian__)
                b_pro = in__.matrix_constrain(n_pro_covar, K, lp__);
            else
                b_pro = in__.matrix_constrain(n_pro_covar, K);

            current_statement_begin__ = 124;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = nVariances;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 125;
            std::vector<local_scalar_t__> nu;
            size_t nu_d_0_max__ = estimate_nu;
            nu.reserve(nu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    nu.push_back(in__.scalar_lb_constrain(2, lp__));
                else
                    nu.push_back(in__.scalar_lb_constrain(2));
            }

            current_statement_begin__ = 126;
            std::vector<local_scalar_t__> ymiss;
            size_t ymiss_d_0_max__ = n_na;
            ymiss.reserve(ymiss_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ymiss_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ymiss.push_back(in__.scalar_constrain(lp__));
                else
                    ymiss.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 127;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = (est_phi * K);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lub_constrain(-(1), 1, lp__));
                else
                    phi.push_back(in__.scalar_lub_constrain(-(1), 1));
            }

            current_statement_begin__ = 128;
            std::vector<local_scalar_t__> theta;
            size_t theta_d_0_max__ = (est_theta * K);
            theta.reserve(theta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta.push_back(in__.scalar_lub_constrain(-(1), 1, lp__));
                else
                    theta.push_back(in__.scalar_lub_constrain(-(1), 1));
            }

            current_statement_begin__ = 129;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lcorr;
            (void) Lcorr;  // dummy to suppress unused var warning
            if (jacobian__)
                Lcorr = in__.cholesky_factor_corr_constrain(n_pcor, lp__);
            else
                Lcorr = in__.cholesky_factor_corr_constrain(n_pcor);

            // transformed parameters
            current_statement_begin__ = 132;
            validate_non_negative_index("pred", "P", P);
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> pred(P, N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            current_statement_begin__ = 133;
            validate_non_negative_index("Z", "P", P);
            validate_non_negative_index("Z", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z(P, K);
            stan::math::initialize(Z, DUMMY_VAR__);
            stan::math::fill(Z, DUMMY_VAR__);

            current_statement_begin__ = 135;
            validate_non_negative_index("yall", "P", P);
            validate_non_negative_index("yall", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> yall(P, N);
            stan::math::initialize(yall, DUMMY_VAR__);
            stan::math::fill(yall, DUMMY_VAR__);

            current_statement_begin__ = 136;
            validate_non_negative_index("sigma_vec", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_vec(P);
            stan::math::initialize(sigma_vec, DUMMY_VAR__);
            stan::math::fill(sigma_vec, DUMMY_VAR__);

            current_statement_begin__ = 137;
            validate_non_negative_index("phi_vec", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi_vec(K);
            stan::math::initialize(phi_vec, DUMMY_VAR__);
            stan::math::fill(phi_vec, DUMMY_VAR__);

            current_statement_begin__ = 138;
            validate_non_negative_index("theta_vec", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_vec(K);
            stan::math::initialize(theta_vec, DUMMY_VAR__);
            stan::math::fill(theta_vec, DUMMY_VAR__);

            current_statement_begin__ = 139;
            validate_non_negative_index("x", "K", K);
            validate_non_negative_index("x", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(K, N);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 140;
            validate_non_negative_index("indicator", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> indicator(K);
            stan::math::initialize(indicator, DUMMY_VAR__);
            stan::math::fill(indicator, DUMMY_VAR__);

            current_statement_begin__ = 141;
            validate_non_negative_index("psi_root", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_root(K);
            stan::math::initialize(psi_root, DUMMY_VAR__);
            stan::math::fill(psi_root, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 151;
            if (as_bool(logical_eq(est_phi, 1))) {

                current_statement_begin__ = 152;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 152;
                    stan::model::assign(phi_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(phi, k, "phi", 1), 
                                "assigning variable phi_vec");
                }
            } else {

                current_statement_begin__ = 154;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 154;
                    stan::model::assign(phi_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable phi_vec");
                }
            }
            current_statement_begin__ = 158;
            if (as_bool(logical_eq(est_theta, 1))) {

                current_statement_begin__ = 159;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 159;
                    stan::model::assign(theta_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(theta, k, "theta", 1), 
                                "assigning variable theta_vec");
                }
            } else {

                current_statement_begin__ = 161;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 161;
                    stan::model::assign(theta_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable theta_vec");
                }
            }
            current_statement_begin__ = 164;
            for (int p = 1; p <= P; ++p) {

                current_statement_begin__ = 165;
                stan::model::assign(sigma_vec, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(varIndx, p, "varIndx", 1), "sigma", 1), 
                            "assigning variable sigma_vec");
            }
            current_statement_begin__ = 168;
            if (as_bool(logical_eq(long_format, 0))) {

                current_statement_begin__ = 170;
                for (int i = 1; i <= n_pos; ++i) {

                    current_statement_begin__ = 171;
                    stan::model::assign(yall, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_pos, i, "row_indx_pos", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_pos, i, "col_indx_pos", 1)), stan::model::nil_index_list())), 
                                get_base1(y, i, "y", 1), 
                                "assigning variable yall");
                }
                current_statement_begin__ = 174;
                if (as_bool(logical_gt(n_na, 0))) {

                    current_statement_begin__ = 175;
                    for (int i = 1; i <= n_na; ++i) {

                        current_statement_begin__ = 176;
                        stan::model::assign(yall, 
                                    stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_na, i, "row_indx_na", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_na, i, "col_indx_na", 1)), stan::model::nil_index_list())), 
                                    get_base1(ymiss, i, "ymiss", 1), 
                                    "assigning variable yall");
                    }
                }
            }
            current_statement_begin__ = 181;
            for (int i = 1; i <= nZ; ++i) {

                current_statement_begin__ = 182;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx, i, "row_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx, i, "col_indx", 1)), stan::model::nil_index_list())), 
                            get_base1(z, i, "z", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 185;
            if (as_bool(logical_gt(nZero, 2))) {

                current_statement_begin__ = 186;
                for (int i = 1; i <= (nZero - 2); ++i) {

                    current_statement_begin__ = 187;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_z, i, "row_indx_z", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_z, i, "col_indx_z", 1)), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 191;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 192;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(zpos, k, "zpos", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 196;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 197;
                if (as_bool(logical_lt(get_base1(zpos, k, "zpos", 1), 0))) {

                    current_statement_begin__ = 198;
                    stan::model::assign(indicator, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                -(1), 
                                "assigning variable indicator");
                } else {

                    current_statement_begin__ = 200;
                    stan::model::assign(indicator, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable indicator");
                }
                current_statement_begin__ = 202;
                stan::model::assign(psi_root, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            stan::math::sqrt(get_base1(psi, k, "psi", 1)), 
                            "assigning variable psi_root");
                current_statement_begin__ = 203;
                for (int p = 1; p <= P; ++p) {

                    current_statement_begin__ = 204;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                ((get_base1(Z, p, k, "Z", 1) * get_base1(indicator, k, "indicator", 1)) * (1 / get_base1(psi_root, k, "psi_root", 1))), 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 209;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 210;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(x0, k, "x0", 1), 
                            "assigning variable x");
                current_statement_begin__ = 214;
                for (int t = 2; t <= N; ++t) {

                    current_statement_begin__ = 215;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                ((get_base1(phi_vec, k, "phi_vec", 1) * get_base1(x, k, (t - 1), "x", 1)) + get_base1(devs, k, (t - 1), "devs", 1)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 219;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 221;
                for (int t = 1; t <= N; ++t) {

                    current_statement_begin__ = 222;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                ((get_base1(x, k, t, "x", 1) * get_base1(indicator, k, "indicator", 1)) * get_base1(psi_root, k, "psi_root", 1)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 227;
            if (as_bool(logical_gt(num_pro_covar, 0))) {

                current_statement_begin__ = 228;
                for (int i = 1; i <= num_pro_covar; ++i) {

                    current_statement_begin__ = 230;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2)), stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 1, "pro_covar_index", 2)), stan::model::nil_index_list())), 
                                (get_base1(x, get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2), get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 1, "pro_covar_index", 2), "x", 1) + (get_base1(b_pro, get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 3, "pro_covar_index", 2), get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2), "b_pro", 1) * get_base1(pro_covar_value, i, "pro_covar_value", 1))), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 236;
            stan::math::assign(pred, multiply(Z, x));
            current_statement_begin__ = 239;
            if (as_bool(logical_gt(num_obs_covar, 0))) {

                current_statement_begin__ = 240;
                for (int i = 1; i <= num_obs_covar; ++i) {

                    current_statement_begin__ = 242;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2)), stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 1, "obs_covar_index", 2)), stan::model::nil_index_list())), 
                                (get_base1(pred, get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2), get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 1, "obs_covar_index", 2), "pred", 1) + (get_base1(b_obs, get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 3, "obs_covar_index", 2), get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2), "b_obs", 1) * get_base1(obs_covar_value, i, "obs_covar_value", 1))), 
                                "assigning variable pred");
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 132;
            size_t pred_j_1_max__ = P;
            size_t pred_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(pred(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pred" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 133;
            size_t Z_j_1_max__ = P;
            size_t Z_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Z(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Z" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Z: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 135;
            size_t yall_j_1_max__ = P;
            size_t yall_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(yall(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: yall" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable yall: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 136;
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_vec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_vec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_vec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 137;
            size_t phi_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < phi_vec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi_vec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi_vec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_vec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 138;
            size_t theta_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta_vec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_vec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_vec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 139;
            size_t x_j_1_max__ = K;
            size_t x_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 140;
            size_t indicator_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < indicator_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(indicator(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: indicator" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable indicator: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 141;
            size_t psi_root_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < psi_root_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi_root(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi_root" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi_root: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 264;
            lp_accum__.add(normal_log<propto__>(x0, 0, 1));
            current_statement_begin__ = 265;
            lp_accum__.add(gamma_log<propto__>(psi, 2, 1));
            current_statement_begin__ = 269;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 270;
                if (as_bool(logical_eq(use_normal, 0))) {

                    current_statement_begin__ = 271;
                    for (int t = 1; t <= 1; ++t) {

                        current_statement_begin__ = 272;
                        if (as_bool(logical_eq(estimate_nu, 1))) {

                            current_statement_begin__ = 273;
                            lp_accum__.add(student_t_log<propto__>(get_base1(devs, k, t, "devs", 1), get_base1(nu, 1, "nu", 1), 0, 1));
                        } else {

                            current_statement_begin__ = 275;
                            lp_accum__.add(student_t_log<propto__>(get_base1(devs, k, t, "devs", 1), nu_fixed, 0, 1));
                        }
                    }
                    current_statement_begin__ = 278;
                    for (int t = 2; t <= (N - 1); ++t) {

                        current_statement_begin__ = 280;
                        if (as_bool(logical_eq(estimate_nu, 1))) {

                            current_statement_begin__ = 281;
                            lp_accum__.add(student_t_log<propto__>(get_base1(devs, k, t, "devs", 1), get_base1(nu, 1, "nu", 1), (get_base1(theta_vec, k, "theta_vec", 1) * get_base1(devs, k, (t - 1), "devs", 1)), 1));
                        } else {

                            current_statement_begin__ = 283;
                            lp_accum__.add(student_t_log<propto__>(get_base1(devs, k, t, "devs", 1), nu_fixed, (get_base1(theta_vec, k, "theta_vec", 1) * get_base1(devs, k, (t - 1), "devs", 1)), 1));
                        }
                    }
                } else {

                    current_statement_begin__ = 287;
                    lp_accum__.add(normal_log<propto__>(get_base1(devs, k, 1, "devs", 1), 0, 1));
                    current_statement_begin__ = 288;
                    for (int t = 2; t <= (N - 1); ++t) {

                        current_statement_begin__ = 290;
                        lp_accum__.add(normal_log<propto__>(get_base1(devs, k, t, "devs", 1), (get_base1(theta_vec, k, "theta_vec", 1) * get_base1(devs, k, (t - 1), "devs", 1)), 1));
                    }
                }
            }
            current_statement_begin__ = 297;
            if (as_bool(logical_eq(estimate_nu, 1))) {

                current_statement_begin__ = 298;
                lp_accum__.add(gamma_log<propto__>(get_base1(nu, 1, "nu", 1), 2, 0.1));
            }
            current_statement_begin__ = 301;
            if (as_bool(logical_eq(est_phi, 1))) {

                current_statement_begin__ = 302;
                lp_accum__.add(uniform_log<propto__>(phi, 0, 1));
            }
            current_statement_begin__ = 305;
            if (as_bool(logical_eq(est_theta, 1))) {

                current_statement_begin__ = 306;
                lp_accum__.add(uniform_log<propto__>(theta, 0, 1));
            }
            current_statement_begin__ = 310;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 311;
            lp_accum__.add(normal_log<propto__>(zpos, 0, 1));
            current_statement_begin__ = 314;
            lp_accum__.add(student_t_log<propto__>(sigma, 3, 0, 2));
            current_statement_begin__ = 315;
            if (as_bool(logical_eq(est_cor, 1))) {

                current_statement_begin__ = 316;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(Lcorr, 1));
            }
            current_statement_begin__ = 320;
            if (as_bool(logical_eq(est_cor, 0))) {

                current_statement_begin__ = 321;
                if (as_bool(logical_eq(long_format, 0))) {

                    current_statement_begin__ = 322;
                    for (int i = 1; i <= P; ++i) {

                        current_statement_begin__ = 323;
                        lp_accum__.add(normal_log(get_base1(yall, i, "yall", 1), get_base1(pred, i, "pred", 1), get_base1(sigma_vec, i, "sigma_vec", 1)));
                    }
                } else {

                    current_statement_begin__ = 326;
                    for (int i = 1; i <= n_pos; ++i) {

                        current_statement_begin__ = 328;
                        lp_accum__.add(normal_log(get_base1(y, i, "y", 1), get_base1(pred, get_base1(row_indx_pos, i, "row_indx_pos", 1), get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(sigma_vec, get_base1(row_indx_pos, i, "row_indx_pos", 1), "sigma_vec", 1)));
                    }
                }
            } else {

                current_statement_begin__ = 333;
                if (as_bool(logical_eq(long_format, 0))) {

                    current_statement_begin__ = 334;
                    for (int i = 1; i <= N; ++i) {

                        current_statement_begin__ = 335;
                        lp_accum__.add(multi_normal_cholesky_log(col(yall, i), col(pred, i), diag_pre_multiply(sigma_vec, Lcorr)));
                    }
                } else {

                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("devs");
        names__.push_back("x0");
        names__.push_back("psi");
        names__.push_back("z");
        names__.push_back("zpos");
        names__.push_back("b_obs");
        names__.push_back("b_pro");
        names__.push_back("sigma");
        names__.push_back("nu");
        names__.push_back("ymiss");
        names__.push_back("phi");
        names__.push_back("theta");
        names__.push_back("Lcorr");
        names__.push_back("pred");
        names__.push_back("Z");
        names__.push_back("yall");
        names__.push_back("sigma_vec");
        names__.push_back("phi_vec");
        names__.push_back("theta_vec");
        names__.push_back("x");
        names__.push_back("indicator");
        names__.push_back("psi_root");
        names__.push_back("log_lik");
        names__.push_back("Omega");
        names__.push_back("Sigma");
        names__.push_back("j");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((N - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs_covar);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pro_covar);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nVariances);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_nu);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_na);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((est_phi * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((est_theta * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pcor);
        dims__.push_back(n_pcor);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_loglik);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pcor);
        dims__.push_back(n_pcor);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pcor);
        dims__.push_back(n_pcor);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dfa_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> devs = in__.matrix_constrain(K, (N - 1));
        size_t devs_j_2_max__ = (N - 1);
        size_t devs_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < devs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < devs_j_1_max__; ++j_1__) {
                vars__.push_back(devs(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> x0 = in__.vector_constrain(K);
        size_t x0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            vars__.push_back(x0(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> psi = in__.vector_lb_constrain(0, K);
        size_t psi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            vars__.push_back(psi(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> z = in__.vector_lub_constrain(get_base1(z_bound, 1, "z_bound", 1), get_base1(z_bound, 2, "z_bound", 1), nZ);
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            vars__.push_back(z(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> zpos = in__.vector_constrain(K);
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            vars__.push_back(zpos(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_obs = in__.matrix_constrain(n_obs_covar, P);
        size_t b_obs_j_2_max__ = P;
        size_t b_obs_j_1_max__ = n_obs_covar;
        for (size_t j_2__ = 0; j_2__ < b_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_obs_j_1_max__; ++j_1__) {
                vars__.push_back(b_obs(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_pro = in__.matrix_constrain(n_pro_covar, K);
        size_t b_pro_j_2_max__ = K;
        size_t b_pro_j_1_max__ = n_pro_covar;
        for (size_t j_2__ = 0; j_2__ < b_pro_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_pro_j_1_max__; ++j_1__) {
                vars__.push_back(b_pro(j_1__, j_2__));
            }
        }

        std::vector<double> sigma;
        size_t sigma_d_0_max__ = nVariances;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }

        std::vector<double> nu;
        size_t nu_d_0_max__ = estimate_nu;
        nu.reserve(nu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
            nu.push_back(in__.scalar_lb_constrain(2));
        }
        size_t nu_k_0_max__ = estimate_nu;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            vars__.push_back(nu[k_0__]);
        }

        std::vector<double> ymiss;
        size_t ymiss_d_0_max__ = n_na;
        ymiss.reserve(ymiss_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ymiss_d_0_max__; ++d_0__) {
            ymiss.push_back(in__.scalar_constrain());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            vars__.push_back(ymiss[k_0__]);
        }

        std::vector<double> phi;
        size_t phi_d_0_max__ = (est_phi * K);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lub_constrain(-(1), 1));
        }
        size_t phi_k_0_max__ = (est_phi * K);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }

        std::vector<double> theta;
        size_t theta_d_0_max__ = (est_theta * K);
        theta.reserve(theta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
            theta.push_back(in__.scalar_lub_constrain(-(1), 1));
        }
        size_t theta_k_0_max__ = (est_theta * K);
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            vars__.push_back(theta[k_0__]);
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lcorr = in__.cholesky_factor_corr_constrain(n_pcor);
        size_t Lcorr_j_2_max__ = n_pcor;
        size_t Lcorr_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                vars__.push_back(Lcorr(j_1__, j_2__));
            }
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 132;
            validate_non_negative_index("pred", "P", P);
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> pred(P, N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);

            current_statement_begin__ = 133;
            validate_non_negative_index("Z", "P", P);
            validate_non_negative_index("Z", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z(P, K);
            stan::math::initialize(Z, DUMMY_VAR__);
            stan::math::fill(Z, DUMMY_VAR__);

            current_statement_begin__ = 135;
            validate_non_negative_index("yall", "P", P);
            validate_non_negative_index("yall", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> yall(P, N);
            stan::math::initialize(yall, DUMMY_VAR__);
            stan::math::fill(yall, DUMMY_VAR__);

            current_statement_begin__ = 136;
            validate_non_negative_index("sigma_vec", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_vec(P);
            stan::math::initialize(sigma_vec, DUMMY_VAR__);
            stan::math::fill(sigma_vec, DUMMY_VAR__);

            current_statement_begin__ = 137;
            validate_non_negative_index("phi_vec", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi_vec(K);
            stan::math::initialize(phi_vec, DUMMY_VAR__);
            stan::math::fill(phi_vec, DUMMY_VAR__);

            current_statement_begin__ = 138;
            validate_non_negative_index("theta_vec", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta_vec(K);
            stan::math::initialize(theta_vec, DUMMY_VAR__);
            stan::math::fill(theta_vec, DUMMY_VAR__);

            current_statement_begin__ = 139;
            validate_non_negative_index("x", "K", K);
            validate_non_negative_index("x", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(K, N);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 140;
            validate_non_negative_index("indicator", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> indicator(K);
            stan::math::initialize(indicator, DUMMY_VAR__);
            stan::math::fill(indicator, DUMMY_VAR__);

            current_statement_begin__ = 141;
            validate_non_negative_index("psi_root", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi_root(K);
            stan::math::initialize(psi_root, DUMMY_VAR__);
            stan::math::fill(psi_root, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 151;
            if (as_bool(logical_eq(est_phi, 1))) {

                current_statement_begin__ = 152;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 152;
                    stan::model::assign(phi_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(phi, k, "phi", 1), 
                                "assigning variable phi_vec");
                }
            } else {

                current_statement_begin__ = 154;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 154;
                    stan::model::assign(phi_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable phi_vec");
                }
            }
            current_statement_begin__ = 158;
            if (as_bool(logical_eq(est_theta, 1))) {

                current_statement_begin__ = 159;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 159;
                    stan::model::assign(theta_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(theta, k, "theta", 1), 
                                "assigning variable theta_vec");
                }
            } else {

                current_statement_begin__ = 161;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 161;
                    stan::model::assign(theta_vec, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable theta_vec");
                }
            }
            current_statement_begin__ = 164;
            for (int p = 1; p <= P; ++p) {

                current_statement_begin__ = 165;
                stan::model::assign(sigma_vec, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(varIndx, p, "varIndx", 1), "sigma", 1), 
                            "assigning variable sigma_vec");
            }
            current_statement_begin__ = 168;
            if (as_bool(logical_eq(long_format, 0))) {

                current_statement_begin__ = 170;
                for (int i = 1; i <= n_pos; ++i) {

                    current_statement_begin__ = 171;
                    stan::model::assign(yall, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_pos, i, "row_indx_pos", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_pos, i, "col_indx_pos", 1)), stan::model::nil_index_list())), 
                                get_base1(y, i, "y", 1), 
                                "assigning variable yall");
                }
                current_statement_begin__ = 174;
                if (as_bool(logical_gt(n_na, 0))) {

                    current_statement_begin__ = 175;
                    for (int i = 1; i <= n_na; ++i) {

                        current_statement_begin__ = 176;
                        stan::model::assign(yall, 
                                    stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_na, i, "row_indx_na", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_na, i, "col_indx_na", 1)), stan::model::nil_index_list())), 
                                    get_base1(ymiss, i, "ymiss", 1), 
                                    "assigning variable yall");
                    }
                }
            }
            current_statement_begin__ = 181;
            for (int i = 1; i <= nZ; ++i) {

                current_statement_begin__ = 182;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx, i, "row_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx, i, "col_indx", 1)), stan::model::nil_index_list())), 
                            get_base1(z, i, "z", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 185;
            if (as_bool(logical_gt(nZero, 2))) {

                current_statement_begin__ = 186;
                for (int i = 1; i <= (nZero - 2); ++i) {

                    current_statement_begin__ = 187;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_z, i, "row_indx_z", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_z, i, "col_indx_z", 1)), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 191;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 192;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(zpos, k, "zpos", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 196;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 197;
                if (as_bool(logical_lt(get_base1(zpos, k, "zpos", 1), 0))) {

                    current_statement_begin__ = 198;
                    stan::model::assign(indicator, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                -(1), 
                                "assigning variable indicator");
                } else {

                    current_statement_begin__ = 200;
                    stan::model::assign(indicator, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable indicator");
                }
                current_statement_begin__ = 202;
                stan::model::assign(psi_root, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            stan::math::sqrt(get_base1(psi, k, "psi", 1)), 
                            "assigning variable psi_root");
                current_statement_begin__ = 203;
                for (int p = 1; p <= P; ++p) {

                    current_statement_begin__ = 204;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                ((get_base1(Z, p, k, "Z", 1) * get_base1(indicator, k, "indicator", 1)) * (1 / get_base1(psi_root, k, "psi_root", 1))), 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 209;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 210;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(x0, k, "x0", 1), 
                            "assigning variable x");
                current_statement_begin__ = 214;
                for (int t = 2; t <= N; ++t) {

                    current_statement_begin__ = 215;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                ((get_base1(phi_vec, k, "phi_vec", 1) * get_base1(x, k, (t - 1), "x", 1)) + get_base1(devs, k, (t - 1), "devs", 1)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 219;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 221;
                for (int t = 1; t <= N; ++t) {

                    current_statement_begin__ = 222;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                ((get_base1(x, k, t, "x", 1) * get_base1(indicator, k, "indicator", 1)) * get_base1(psi_root, k, "psi_root", 1)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 227;
            if (as_bool(logical_gt(num_pro_covar, 0))) {

                current_statement_begin__ = 228;
                for (int i = 1; i <= num_pro_covar; ++i) {

                    current_statement_begin__ = 230;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2)), stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 1, "pro_covar_index", 2)), stan::model::nil_index_list())), 
                                (get_base1(x, get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2), get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 1, "pro_covar_index", 2), "x", 1) + (get_base1(b_pro, get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 3, "pro_covar_index", 2), get_base1(get_base1(pro_covar_index, i, "pro_covar_index", 1), 2, "pro_covar_index", 2), "b_pro", 1) * get_base1(pro_covar_value, i, "pro_covar_value", 1))), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 236;
            stan::math::assign(pred, multiply(Z, x));
            current_statement_begin__ = 239;
            if (as_bool(logical_gt(num_obs_covar, 0))) {

                current_statement_begin__ = 240;
                for (int i = 1; i <= num_obs_covar; ++i) {

                    current_statement_begin__ = 242;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2)), stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 1, "obs_covar_index", 2)), stan::model::nil_index_list())), 
                                (get_base1(pred, get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2), get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 1, "obs_covar_index", 2), "pred", 1) + (get_base1(b_obs, get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 3, "obs_covar_index", 2), get_base1(get_base1(obs_covar_index, i, "obs_covar_index", 1), 2, "obs_covar_index", 2), "b_obs", 1) * get_base1(obs_covar_value, i, "obs_covar_value", 1))), 
                                "assigning variable pred");
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t pred_j_2_max__ = N;
                size_t pred_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                        vars__.push_back(pred(j_1__, j_2__));
                    }
                }
                size_t Z_j_2_max__ = K;
                size_t Z_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                        vars__.push_back(Z(j_1__, j_2__));
                    }
                }
                size_t yall_j_2_max__ = N;
                size_t yall_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                        vars__.push_back(yall(j_1__, j_2__));
                    }
                }
                size_t sigma_vec_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_vec(j_1__));
                }
                size_t phi_vec_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < phi_vec_j_1_max__; ++j_1__) {
                    vars__.push_back(phi_vec(j_1__));
                }
                size_t theta_vec_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
                    vars__.push_back(theta_vec(j_1__));
                }
                size_t x_j_2_max__ = N;
                size_t x_j_1_max__ = K;
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                        vars__.push_back(x(j_1__, j_2__));
                    }
                }
                size_t indicator_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < indicator_j_1_max__; ++j_1__) {
                    vars__.push_back(indicator(j_1__));
                }
                size_t psi_root_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < psi_root_j_1_max__; ++j_1__) {
                    vars__.push_back(psi_root(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 347;
            validate_non_negative_index("log_lik", "n_loglik", n_loglik);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_loglik);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 348;
            validate_non_negative_index("Omega", "n_pcor", n_pcor);
            validate_non_negative_index("Omega", "n_pcor", n_pcor);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Omega(n_pcor, n_pcor);
            stan::math::initialize(Omega, DUMMY_VAR__);
            stan::math::fill(Omega, DUMMY_VAR__);

            current_statement_begin__ = 349;
            validate_non_negative_index("Sigma", "n_pcor", n_pcor);
            validate_non_negative_index("Sigma", "n_pcor", n_pcor);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(n_pcor, n_pcor);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);

            current_statement_begin__ = 350;
            int j;
            (void) j;  // dummy to suppress unused var warning
            stan::math::fill(j, std::numeric_limits<int>::min());

            // generated quantities statements
            current_statement_begin__ = 351;
            stan::math::assign(j, 0);
            current_statement_begin__ = 353;
            if (as_bool(logical_eq(est_cor, 1))) {

                current_statement_begin__ = 354;
                stan::math::assign(Omega, multiply_lower_tri_self_transpose(Lcorr));
                current_statement_begin__ = 355;
                stan::math::assign(Sigma, quad_form_diag(Omega, sigma_vec));
            }
            current_statement_begin__ = 359;
            if (as_bool(logical_eq(est_cor, 0))) {

                current_statement_begin__ = 360;
                if (as_bool(logical_eq(long_format, 0))) {

                    current_statement_begin__ = 361;
                    stan::math::assign(j, 0);
                    current_statement_begin__ = 362;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 363;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 364;
                            stan::math::assign(j, (j + 1));
                            current_statement_begin__ = 365;
                            stan::model::assign(log_lik, 
                                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                        normal_log(get_base1(yall, p, n, "yall", 1), get_base1(pred, p, n, "pred", 1), get_base1(sigma_vec, p, "sigma_vec", 1)), 
                                        "assigning variable log_lik");
                        }
                    }
                } else {

                    current_statement_begin__ = 369;
                    for (int i = 1; i <= n_pos; ++i) {

                        current_statement_begin__ = 371;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    normal_log(get_base1(y, i, "y", 1), get_base1(pred, get_base1(row_indx_pos, i, "row_indx_pos", 1), get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(sigma_vec, get_base1(row_indx_pos, i, "row_indx_pos", 1), "sigma_vec", 1)), 
                                    "assigning variable log_lik");
                    }
                }
            } else {

                current_statement_begin__ = 376;
                if (as_bool(logical_eq(long_format, 0))) {

                    current_statement_begin__ = 377;
                    for (int i = 1; i <= N; ++i) {

                        current_statement_begin__ = 378;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    multi_normal_cholesky_log(col(yall, i), col(pred, i), diag_pre_multiply(sigma_vec, Lcorr)), 
                                    "assigning variable log_lik");
                    }
                } else {

                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 347;
            size_t log_lik_j_1_max__ = n_loglik;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }

            current_statement_begin__ = 348;
            size_t Omega_j_2_max__ = n_pcor;
            size_t Omega_j_1_max__ = n_pcor;
            for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                    vars__.push_back(Omega(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 349;
            size_t Sigma_j_2_max__ = n_pcor;
            size_t Sigma_j_1_max__ = n_pcor;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 350;
            check_greater_or_equal(function__, "j", j, 0);

            vars__.push_back(j);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dfa";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t devs_j_2_max__ = (N - 1);
        size_t devs_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < devs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < devs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "devs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zpos" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_obs_j_2_max__ = P;
        size_t b_obs_j_1_max__ = n_obs_covar;
        for (size_t j_2__ = 0; j_2__ < b_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_obs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_obs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t b_pro_j_2_max__ = K;
        size_t b_pro_j_1_max__ = n_pro_covar;
        for (size_t j_2__ = 0; j_2__ < b_pro_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_pro_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_pro" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = estimate_nu;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ymiss" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = (est_phi * K);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_k_0_max__ = (est_theta * K);
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Lcorr_j_2_max__ = n_pcor;
        size_t Lcorr_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lcorr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t pred_j_2_max__ = N;
            size_t pred_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Z_j_2_max__ = K;
            size_t Z_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yall_j_2_max__ = N;
            size_t yall_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yall" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < phi_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = N;
            size_t x_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t indicator_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < indicator_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indicator" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi_root_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < psi_root_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi_root" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_loglik;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Omega_j_2_max__ = n_pcor;
        size_t Omega_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_j_2_max__ = n_pcor;
        size_t Sigma_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "j";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t devs_j_2_max__ = (N - 1);
        size_t devs_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < devs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < devs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "devs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zpos" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_obs_j_2_max__ = P;
        size_t b_obs_j_1_max__ = n_obs_covar;
        for (size_t j_2__ = 0; j_2__ < b_obs_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_obs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_obs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t b_pro_j_2_max__ = K;
        size_t b_pro_j_1_max__ = n_pro_covar;
        for (size_t j_2__ = 0; j_2__ < b_pro_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_pro_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_pro" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = estimate_nu;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ymiss" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = (est_phi * K);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_k_0_max__ = (est_theta * K);
        for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Lcorr_j_1_max__ = ((n_pcor * (n_pcor - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lcorr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t pred_j_2_max__ = N;
            size_t pred_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Z_j_2_max__ = K;
            size_t Z_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yall_j_2_max__ = N;
            size_t yall_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yall" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < phi_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_vec_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = N;
            size_t x_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t indicator_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < indicator_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indicator" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi_root_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < psi_root_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi_root" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_loglik;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Omega_j_2_max__ = n_pcor;
        size_t Omega_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_j_2_max__ = n_pcor;
        size_t Sigma_j_1_max__ = n_pcor;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "j";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace

typedef model_dfa_namespace::model_dfa stan_model;


#endif
